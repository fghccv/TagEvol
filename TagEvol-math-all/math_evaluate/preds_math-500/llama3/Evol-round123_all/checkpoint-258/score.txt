{'dataset': 'math-500',
 'max_len': 1024,
 'model': '/home/sqshou/workspace/TagEvol/TagEvol-math/Auto_Evol_Instruct/models/Evol-round123_all/checkpoint-258/',
 'num_gpus': 8,
 'output_path': './preds_math-500/llama3//Evol-round123_all/checkpoint-258',
 'temperature': 0.0,
 'top_p': 1}
Convert the point $(0,3)$ in rectangular coordinates to polar coordinates.  Enter your answer in the form $(r,\theta),$ where $r > 0$ and $0 \le \theta < 2 \pi.$


INFO 04-19 11:25:26 __init__.py:207] Automatically detected platform cuda.
INFO 04-19 11:25:35 config.py:549] This model supports multiple tasks: {'embed', 'generate', 'classify', 'reward', 'score'}. Defaulting to 'generate'.
INFO 04-19 11:25:35 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.3) with config: model='/home/sqshou/workspace/TagEvol/TagEvol-math/Auto_Evol_Instruct/models/Evol-round123_all/checkpoint-258/', speculative_config=None, tokenizer='/home/sqshou/workspace/TagEvol/TagEvol-math/Auto_Evol_Instruct/models/Evol-round123_all/checkpoint-258/', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=8192, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/home/sqshou/workspace/TagEvol/TagEvol-math/Auto_Evol_Instruct/models/Evol-round123_all/checkpoint-258/, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 04-19 11:25:37 cuda.py:229] Using Flash Attention backend.
INFO 04-19 11:25:37 model_runner.py:1110] Starting to load model /home/sqshou/workspace/TagEvol/TagEvol-math/Auto_Evol_Instruct/models/Evol-round123_all/checkpoint-258/...
INFO 04-19 11:25:46 model_runner.py:1115] Loading model weights took 14.2717 GB
INFO 04-19 11:25:48 worker.py:267] Memory profiling takes 1.55 seconds
INFO 04-19 11:25:48 worker.py:267] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
INFO 04-19 11:25:48 worker.py:267] model weights take 14.27GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 1.44GiB; the rest of the memory reserved for KV Cache is 55.43GiB.
INFO 04-19 11:25:48 executor_base.py:111] # cuda blocks: 64869, # CPU blocks: 4681
INFO 04-19 11:25:48 executor_base.py:116] Maximum concurrency for 8192 tokens per request: 126.70x
INFO 04-19 11:25:53 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 04-19 11:26:12 model_runner.py:1562] Graph capturing finished in 20 secs, took 0.75 GiB
INFO 04-19 11:26:12 llm_engine.py:436] init engine (profile, create kv cache, warmup model) took 26.22 seconds
Score: 0.69
