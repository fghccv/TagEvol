{'dataset': 'math-500',
 'max_len': 2048,
 'model': '../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/',
 'num_gpus': 8,
 'output_path': './preds_math-500/llama3/tag_reduce_new/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174',
 'temperature': 0.0,
 'top_p': 1}
Below is an instruction that describes a task. Write a response that appropriately completes the request.

### Instruction:
Convert the point $(0,3)$ in rectangular coordinates to polar coordinates.  Enter your answer in the form $(r,\theta),$ where $r > 0$ and $0 \le \theta < 2 \pi.$
Please reason step by step, and put your final answer within \boxed{}.

### Response:
INFO 02-08 12:52:22 config.py:510] This model supports multiple tasks: {'score', 'embed', 'generate', 'reward', 'classify'}. Defaulting to 'generate'.
INFO 02-08 12:52:22 config.py:1310] Defaulting to use mp for distributed inference
INFO 02-08 12:52:22 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/', speculative_config=None, tokenizer='../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=8192, download_dir=None, load_format=auto, tensor_parallel_size=8, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
WARNING 02-08 12:52:22 multiproc_worker_utils.py:312] Reducing Torch parallelism from 64 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-08 12:52:23 custom_cache_manager.py:17] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-08 12:52:23 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:30 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:30 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:36 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:36 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:41 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /data/scir/yixuanwang/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
INFO 02-08 12:52:41 shm_broadcast.py:255] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3, 4, 5, 6, 7], buffer_handle=(7, 4194304, 6, 'psm_59ab77d2'), local_subscribe_port=34255, remote_subscribe_port=None)
INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:41 model_runner.py:1094] Starting to load model ../tag_reduce_new/models/llama3/tag_evol_tag1_pool_21_20mul3up_alltags_7btags/checkpoint-174/...
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:42 model_runner.py:1099] Loading model weights took 1.8735 GB
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.69 seconds
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.71 seconds
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.72 seconds
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.72 seconds
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.72 seconds
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.75 seconds
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.49GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.46GiB.
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.77 seconds
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 3.17GiB; PyTorch activation peak memory takes 0.37GiB; the rest of the memory reserved for KV Cache is 65.77GiB.
INFO 02-08 12:52:47 worker.py:241] Memory profiling takes 4.78 seconds
INFO 02-08 12:52:47 worker.py:241] the current vLLM instance can use total_gpu_memory (79.10GiB) x gpu_memory_utilization (0.90) = 71.19GiB
INFO 02-08 12:52:47 worker.py:241] model weights take 1.87GiB; non_torch_memory takes 4.49GiB; PyTorch activation peak memory takes 1.26GiB; the rest of the memory reserved for KV Cache is 63.57GiB.
INFO 02-08 12:52:47 distributed_gpu_executor.py:57] # GPU blocks: 260382, # CPU blocks: 16384
INFO 02-08 12:52:47 distributed_gpu_executor.py:61] Maximum concurrency for 8192 tokens per request: 508.56x
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:52:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:53:00 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:53:01 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
INFO 02-08 12:53:03 custom_all_reduce.py:224] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:53:03 model_runner.py:1535] Graph capturing finished in 14 secs, took 0.23 GiB
INFO 02-08 12:53:03 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 20.74 seconds
Score: 0.344
INFO 02-08 12:53:42 multiproc_worker_utils.py:140] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=922071)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922074)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922075)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922073)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922076)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922077)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=922072)[0;0m INFO 02-08 12:53:42 multiproc_worker_utils.py:247] Worker exiting
